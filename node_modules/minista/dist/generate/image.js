import path from "node:path";
import fs from "fs-extra";
import sharp from "sharp";
import { logger } from "../cli/logger.js";
import { getSpace } from "../utility/space.js";
async function generateImageCache(fileName, data) {
  if (Object.keys(data).length === 0) {
    return;
  }
  await fs.outputJson(fileName, data, { spaces: 2 }).catch((err) => {
    console.error(err);
  });
}
async function generateTempImage({
  fileName,
  filePath,
  createImage
}) {
  const { input, width, height, resizeOptions } = createImage;
  const image = sharp(input);
  image.resize(width, height, resizeOptions);
  const data = await image.toBuffer();
  await fs.outputFile(fileName, data).then(() => {
    logger({ label: "BUILD", main: filePath });
  }).catch((err) => {
    console.error(err);
  });
}
async function generateImages({
  createImages,
  config,
  maxNameLength
}) {
  const { resolvedRoot } = config.sub;
  const createArray = Object.entries(createImages);
  if (!createArray.length) {
    return;
  }
  await Promise.all(
    createArray.map(async (item) => {
      const fileName = item[0];
      const createImage = item[1];
      const { input, width, height, resizeOptions } = createImage;
      const { format, formatOptions } = createImage;
      const image = sharp(input);
      image.resize(width, height, resizeOptions);
      switch (format) {
        case "jpg":
          image.jpeg({ ...formatOptions?.jpg });
          break;
        case "png":
          image.png({ ...formatOptions?.png });
          break;
        case "webp":
          image.webp({ ...formatOptions?.webp });
          break;
        case "avif":
          image.avif({ ...formatOptions?.avif });
          break;
      }
      const data = await image.toBuffer();
      const space = getSpace({
        nameLength: fileName.length,
        maxNameLength,
        min: 3
      });
      const routePath = path.join(resolvedRoot, config.main.out, fileName);
      const relativePath = path.relative(process.cwd(), routePath);
      await fs.outputFile(routePath, data).then(() => {
        logger({ label: "BUILD", main: relativePath, space, data });
      }).catch((err) => {
        console.error(err);
      });
      return;
    })
  );
}
export {
  generateImageCache,
  generateImages,
  generateTempImage
};
