import { jsx, jsxs } from "react/jsx-runtime";
const autoSize = "__minista_image_auto_size";
function resolveAspect(aspect) {
  const regex = /^\d+\.?\d*:\d+\.?\d*$/;
  const isAspect = regex.test(aspect);
  if (isAspect) {
    return aspect;
  }
}
function resolveTarget(src) {
  const regex = /^https?:\/\//i;
  const isRemote = regex.test(src);
  if (isRemote) {
    return "remote";
  } else {
    return "image";
  }
}
function Image({
  src,
  outName = "",
  sizes = autoSize,
  width = autoSize,
  height = autoSize,
  alt = "",
  decoding = "async",
  loading = "lazy",
  layout,
  breakpoints,
  resolution,
  format,
  formatOptions,
  quality,
  aspect,
  background,
  fit,
  position,
  ...attributes
}) {
  const optimizeObj = {
    layout,
    breakpoints,
    resolution,
    format,
    formatOptions,
    quality,
    aspect: aspect ? resolveAspect(aspect) : void 0,
    background,
    fit,
    position
  };
  const optimizeStr = JSON.stringify(optimizeObj);
  return /* @__PURE__ */ jsx(
    "img",
    {
      srcSet: "",
      src: "",
      sizes,
      width,
      height,
      alt,
      decoding,
      loading,
      "data-minista-transform-target": resolveTarget(src),
      "data-minista-image-src": src,
      "data-minista-image-outname": outName,
      "data-minista-image-optimize": optimizeStr,
      ...attributes
    }
  );
}
function Picture({
  src,
  outName = "",
  sizes = autoSize,
  width = autoSize,
  height = autoSize,
  alt = "",
  decoding = "async",
  loading = "lazy",
  layout,
  breakpoints,
  resolution,
  formats,
  formatOptions,
  quality,
  aspect,
  background,
  fit,
  position,
  artDirectives,
  ...attributes
}) {
  const format = formats?.at(-1);
  const otherFormats = formats && formats.length >= 2 ? formats.filter((item) => item !== format) : [];
  const resolvedAspect = aspect ? resolveAspect(aspect) : void 0;
  const optimizeObj = {
    layout,
    breakpoints,
    resolution,
    format,
    formatOptions,
    quality,
    aspect: resolvedAspect,
    background,
    fit,
    position
  };
  const optimizeStr = JSON.stringify(optimizeObj);
  return /* @__PURE__ */ jsxs("picture", { children: [
    artDirectives?.map((item, index) => {
      const sourceSizes = item.sizes || autoSize;
      const sourceWidth = item.width || autoSize;
      const sourceHeight = item.height || autoSize;
      const resolvedSourceAspect = item.aspect ? resolveAspect(item.aspect) : void 0;
      if (item.formats && item.formats.length > 0) {
        return item.formats.map((itemFormat, formatIndex) => {
          const sourceOptimizeObj = {
            layout: item.layout || layout,
            breakpoints: item.breakpoints || breakpoints,
            resolution: item.resolution || resolution,
            format: itemFormat,
            formatOptions: item.formatOptions || formatOptions,
            quality: item.quality || quality,
            aspect: resolvedSourceAspect || resolvedAspect,
            background: item.background || background,
            fit: item.fit || fit,
            position: item.position || position
          };
          const sourceOptimizeStr = JSON.stringify(sourceOptimizeObj);
          return /* @__PURE__ */ jsx(
            "source",
            {
              media: item.media,
              srcSet: "",
              sizes: sourceSizes,
              width: sourceWidth,
              height: sourceHeight,
              "data-minista-transform-target": resolveTarget(item.src),
              "data-minista-image-src": item.src,
              "data-minista-image-outname": outName,
              "data-minista-image-optimize": sourceOptimizeStr
            },
            `${index}-${formatIndex}`
          );
        });
      } else {
        const sourceOptimizeObj = {
          layout: item.layout || layout,
          breakpoints: item.breakpoints || breakpoints,
          resolution: item.resolution || resolution,
          format: void 0,
          formatOptions: item.formatOptions || formatOptions,
          quality: item.quality || quality,
          aspect: resolvedSourceAspect || resolvedAspect,
          background: item.background || background,
          fit: item.fit || fit,
          position: item.position || position
        };
        const sourceOptimizeStr = JSON.stringify(sourceOptimizeObj);
        return /* @__PURE__ */ jsx(
          "source",
          {
            media: item.media,
            srcSet: "",
            sizes: sourceSizes,
            width: sourceWidth,
            height: sourceHeight,
            "data-minista-transform-target": resolveTarget(item.src),
            "data-minista-image-src": item.src,
            "data-minista-image-outname": outName,
            "data-minista-image-optimize": sourceOptimizeStr
          },
          index
        );
      }
    }),
    otherFormats.map((item, index) => {
      const sourceOptimizeObj = {
        layout,
        breakpoints,
        resolution,
        format: item,
        formatOptions,
        quality,
        aspect: resolvedAspect,
        background,
        fit,
        position
      };
      const sourceOptimizeStr = JSON.stringify(sourceOptimizeObj);
      return /* @__PURE__ */ jsx(
        "source",
        {
          srcSet: "",
          sizes,
          width,
          height,
          "data-minista-transform-target": resolveTarget(src),
          "data-minista-image-src": src,
          "data-minista-image-outname": outName,
          "data-minista-image-optimize": sourceOptimizeStr
        },
        index
      );
    }),
    /* @__PURE__ */ jsx(
      "img",
      {
        srcSet: "",
        src: "",
        sizes,
        width,
        height,
        alt,
        decoding,
        loading,
        "data-minista-transform-target": resolveTarget(src),
        "data-minista-image-src": src,
        "data-minista-image-outname": outName,
        "data-minista-image-optimize": optimizeStr,
        ...attributes
      }
    )
  ] });
}
export {
  Image,
  Picture
};
