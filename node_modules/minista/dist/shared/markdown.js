import { Fragment, jsx } from "react/jsx-runtime";
import { createElement, Fragment as Fragment2 } from "react";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import remarkRehype from "remark-rehype";
import rehypeHighlight from "rehype-highlight";
import rehypeRaw from "rehype-raw";
import rehypeReact from "rehype-react";
function Markdown({
  content,
  children,
  components = {},
  useRemarkGfm = true,
  useRehypeHighlight = true,
  remarkPlugins,
  rehypePlugins,
  remarkParseOptions = {},
  remarkGfmOptions = {},
  remarkRehypeOptions = { allowDangerousHtml: true },
  rehypeHighlightOptions = {},
  rehypeRawOptions = {},
  rehypeReactOptions = {
    createElement,
    Fragment: Fragment2,
    components: {}
  }
}) {
  const _content = content || children || "";
  const _rehypeReactOptions = {
    ...rehypeReactOptions,
    components
  };
  const processor = unified();
  processor.use(remarkParse, remarkParseOptions);
  if (useRemarkGfm) {
    processor.use(remarkGfm, remarkGfmOptions);
  }
  if (remarkPlugins?.length) {
    remarkPlugins.map((plugin) => {
      return processor.use(plugin);
    });
  }
  processor.use(remarkRehype, remarkRehypeOptions);
  if (useRehypeHighlight) {
    processor.use(rehypeHighlight, rehypeHighlightOptions);
  }
  if (rehypePlugins?.length) {
    rehypePlugins.map((plugin) => {
      return processor.use(plugin);
    });
  }
  processor.use(rehypeRaw, rehypeRawOptions);
  processor.use(rehypeReact, _rehypeReactOptions);
  return /* @__PURE__ */ jsx(Fragment, { children: processor.processSync(_content).result });
}
export {
  Markdown
};
