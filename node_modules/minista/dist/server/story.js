import { createElement } from "react";
function getStories(config) {
  if (!config.main.storyapp.useImport) {
    return { storyPages: [], storyItems: [] };
  }
  const JS_STORIES = import.meta.glob(
    ["/src/**/*.stories.{js,jsx,ts,tsx}"],
    {
      eager: true
    }
  );
  const MDX_STORIES = import.meta.glob(
    ["/src/**/*.stories.{md,mdx}"],
    {
      eager: true
    }
  );
  const jsStories = Object.keys(JS_STORIES).map((storyFileKey) => {
    const storyFile = JS_STORIES[storyFileKey];
    const storyMeta = storyFile.default;
    if (!storyMeta?.id && !storyMeta?.title) {
      return [];
    }
    const storyBase = "/" + config.main.storyapp.outDir;
    const storyId = (storyMeta.id || storyMeta.title).split("/").map((id) => id.trim().toLowerCase()).join("/");
    const storyTitle = storyMeta.title.split("/").map((title) => title.trim()).join(" / ");
    const storyList = Object.keys(storyFile).filter((key) => !["default", "metadata", "frontmatter"].includes(key)).map((key) => ({ storyKey: key, storyObj: storyFile[key] }));
    return storyList.map((item) => {
      const currentObj = item.storyObj;
      const currentId = item.storyKey.toLowerCase();
      const currentTitle = currentObj.name || item.storyKey;
      const pagePath = [storyBase, storyId, currentId].join("/");
      const title = [storyTitle, currentTitle].join(" / ");
      const draft = currentObj.draft || storyMeta.draft || false;
      const hidden = currentObj.hidden || storyMeta.hidden || false;
      const component = storyMeta.component;
      const args = {
        ...storyMeta.args || {},
        ...currentObj.args || {}
      };
      const parameters = {
        ...storyMeta.parameters || {},
        ...currentObj.parameters || {}
      };
      const decorators = [
        ...storyMeta.decorators || [],
        ...currentObj.decorators || []
      ].flat();
      return {
        path: pagePath,
        title,
        draft,
        hidden,
        component,
        args,
        parameters,
        decorators,
        metadata: { ...{}, ...storyFile.metadata || {} },
        frontmatter: { ...{}, ...storyFile.frontmatter || {} }
      };
    });
  });
  const mdxStories = Object.keys(MDX_STORIES).map((storyFileKey) => {
    const storyFile = MDX_STORIES[storyFileKey];
    const storyMeta = {
      ...storyFile.frontmatter || {},
      ...storyFile.metadata || {}
    };
    const storyBase = "/" + config.main.storyapp.outDir;
    const storyId = (storyMeta.id || storyMeta.title || "").split("/").map((id) => id.trim().toLowerCase()).join("/");
    const storyTitle = (storyMeta.title || "").split("/").map((title2) => title2.trim()).join(" / ");
    if (!storyId || !storyTitle) {
      return [];
    }
    const pagePath = [storyBase, storyId].join("/");
    const title = [storyTitle].join(" / ");
    const draft = storyMeta.draft || false;
    const hidden = storyMeta.hidden || false;
    const component = storyFile.default;
    const args = { ...storyMeta.args || {} };
    const parameters = {
      ...storyMeta.parameters || {}
    };
    const decorators = [
      ...storyMeta.decorators || []
    ].flat();
    return [
      {
        path: pagePath,
        title,
        draft,
        hidden,
        component,
        args,
        parameters,
        decorators,
        metadata: { ...{}, ...storyFile.metadata || {} },
        frontmatter: { ...{}, ...storyFile.frontmatter || {} }
      }
    ];
  });
  const mergesStories = [...jsStories, ...mdxStories].flat().filter((item) => Object.keys(item).length !== 0);
  const uniqueStories = Object.values(
    Object.fromEntries(mergesStories.map((item) => [item.path, item]))
  );
  if (!uniqueStories.length) {
    return { storyPages: [], storyItems: [] };
  }
  const storyPages = uniqueStories.map((item) => {
    const baseComponent = () => createElement(item.component, item.args);
    const decoratedComponent = item.decorators.length > 0 ? item.decorators.reduceRight((accumulator, currentValue) => {
      const result = accumulator;
      return () => currentValue(result);
    }, baseComponent) : baseComponent;
    const metadata = {
      title: item.title,
      draft: item.draft,
      ...item.metadata,
      ...item.frontmatter
    };
    return {
      path: item.path,
      component: decoratedComponent,
      getStaticData: void 0,
      metadata,
      frontmatter: item.frontmatter
    };
  });
  return { storyPages, storyItems: [] };
}
export {
  getStories
};
