import path from "node:path";
import { fileURLToPath, pathToFileURL } from "node:url";
import fs from "fs-extra";
import { normalizePath } from "vite";
import { build as esBuild } from "esbuild";
import { deepmergeCustom } from "deepmerge-ts";
import { getNodeModulesPath } from "../utility/path.js";
async function resolveUserConfig(inlineConfig) {
  const configFile = inlineConfig?.configFile;
  const trimConfig = inlineConfig;
  delete trimConfig?.configFile;
  trimConfig?.base === void 0 && delete trimConfig?.base;
  const trimmedConfig = trimConfig || {};
  if (configFile === false) {
    return trimmedConfig;
  }
  const configStr = typeof configFile === "string" ? configFile : "";
  const resolvedRoot = normalizePath(
    inlineConfig?.root ? path.resolve(inlineConfig.root) : process.cwd()
  );
  let configPaths = [configStr];
  const configName = "minista.config";
  const configExts = [".ts", ".tsx", ".js", ".jsx", ".cjs", ".mjs", ".json"];
  configPaths = configPaths.concat(
    configExts.map((item) => path.join(resolvedRoot, configName + item))
  );
  configPaths = configPaths.concat(
    configExts.map((item) => path.join(process.cwd(), configName + item))
  );
  const configPath = configPaths.find((item) => fs.existsSync(item));
  if (configPath) {
    const compiledConfigPath = path.join(
      getNodeModulesPath(resolvedRoot),
      ".minista",
      "minista.config.mjs"
    );
    const entryPointUrl = pathToFileURL(path.resolve(configPath));
    const entryPointPath = fileURLToPath(entryPointUrl);
    await esBuild({
      entryPoints: [entryPointPath],
      outfile: compiledConfigPath,
      bundle: true,
      format: "esm",
      platform: "node",
      minify: false,
      plugins: [
        {
          name: "minista-esbuild-plugin:external",
          setup(build) {
            let filter = /^[^.\/]|^\.[^.\/]|^\.\.[^\/]/;
            build.onResolve({ filter }, (args) => {
              if (args.path === entryPointPath) {
                return { path: args.path, external: false };
              }
              return { path: args.path, external: true };
            });
          }
        }
      ]
    }).catch((err) => {
      console.error(err);
    });
    const { default: compiledUserConfig } = await import(pathToFileURL(compiledConfigPath).href);
    const customDeepmerge = deepmergeCustom({
      mergeArrays: false
    });
    const mergedConfig = customDeepmerge(
      compiledUserConfig,
      trimmedConfig
    );
    return mergedConfig;
  } else {
    return trimmedConfig;
  }
}
export {
  resolveUserConfig
};
