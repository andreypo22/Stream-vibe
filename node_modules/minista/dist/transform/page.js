import { Fragment, jsx } from "react/jsx-runtime";
import { renderToString } from "react-dom/server";
import { StaticRouter } from "react-router-dom/server.js";
import { HelmetProvider } from "react-helmet-async";
import { Route, Routes } from "react-router-dom";
function Wrap({
  component,
  props,
  children
}) {
  const WrapComponent = component;
  return /* @__PURE__ */ jsx(Fragment, { children: WrapComponent ? /* @__PURE__ */ jsx(WrapComponent, { ...props, children }) : /* @__PURE__ */ jsx(Fragment, { children }) });
}
function Page({
  resolvedGlobal,
  resolvedPages
}) {
  const global = resolvedGlobal;
  const routes = resolvedPages;
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(Routes, { children: routes.map((page) => {
    const WrapComponent = Wrap;
    const PageComponent = page.component;
    const props = {
      title: "",
      group: "",
      draft: false,
      ...global.metadata,
      ...page.metadata,
      ...global.staticData.props,
      ...page.staticData.props,
      url: page.path,
      location: { pathname: page.path },
      frontmatter: page.frontmatter
    };
    return /* @__PURE__ */ jsx(
      Route,
      {
        path: page.path,
        element: /* @__PURE__ */ jsx(WrapComponent, { component: global.component, props, children: /* @__PURE__ */ jsx(PageComponent, { ...props }) })
      },
      page.path
    );
  }) }) });
}
function transformPage({
  url,
  resolvedGlobal,
  resolvedPages,
  headTags,
  startTags,
  endTags
}) {
  const helmetContext = {};
  let markup = renderToString(
    /* @__PURE__ */ jsx(StaticRouter, { location: url, children: /* @__PURE__ */ jsx(HelmetProvider, { context: helmetContext, children: /* @__PURE__ */ jsx(Page, { resolvedGlobal, resolvedPages }) }) })
  );
  markup = markup.replace(/(?<=\<[img|source].+?)(srcSet=)/g, "srcset=");
  const { helmet } = helmetContext;
  let htmlAttributes = ` lang="ja" ${helmet.htmlAttributes.toString()}`;
  let bodyAttributes = "";
  if (Object.hasOwn(helmet.htmlAttributes.toComponent(), "lang")) {
    htmlAttributes = " " + helmet.htmlAttributes.toString();
  }
  if (helmet.bodyAttributes) {
    bodyAttributes = " " + helmet.bodyAttributes.toString();
  }
  const metaAll = helmet.meta.toString();
  const metaCharsetDefault = `<meta charset="UTF-8" />`;
  const metaCharsetReg = /<meta[^<>]*?charset=.*?\/>/gi;
  const metaCharsetArray = metaAll.match(metaCharsetReg) || [""];
  const metaViewportDefault = `<meta name="viewport" content="width=device-width, initial-scale=1.0" />`;
  const metaViewportReg = /<meta[^<>]*?name="viewport".*?\/>/gi;
  const metaViewportArray = metaAll.match(metaViewportReg) || [""];
  let metaCharset;
  metaCharset = metaCharsetArray.at(-1) || "";
  metaCharset = metaCharset || metaCharsetDefault;
  let metaViewport;
  metaViewport = metaViewportArray.at(-1) || "";
  metaViewport = metaViewport || metaViewportDefault;
  let metaOther;
  metaOther = metaAll || "";
  metaOther = metaOther.replace(metaCharsetReg, "").replace(metaViewportReg, "");
  const insertHeadTags = headTags ? headTags : "";
  const insertStartTags = startTags ? `${startTags}
` : "";
  const insertEndTags = endTags ? `
${endTags}` : "";
  function staticHelmet(data) {
    return data.replace(/\sdata-rh="true"/g, "");
  }
  return `<!doctype html>
<html${htmlAttributes}>
  <head>
    ${staticHelmet(metaCharset)}
    ${staticHelmet(metaViewport)}
    ${staticHelmet(helmet.title.toString())}
    ${staticHelmet(metaOther)}
    ${staticHelmet(helmet.link.toString())}
    ${staticHelmet(helmet.script.toString())}
    ${insertHeadTags}
    ${staticHelmet(helmet.style.toString())}
  </head>
  <body${bodyAttributes}>
    ${insertStartTags}${markup}${insertEndTags}
  </body>
</html>`;
}
export {
  transformPage
};
